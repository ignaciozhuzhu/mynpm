var net = require('net');

var HOST = '127.0.0.1';

var PORT = 1337;
var consolelog='';

var server = net.createServer();
//server.maxConnections = 1;
server.listen(PORT, HOST);


console.log('Server listening on ' + HOST + ':' + PORT);
consolelog +='Server listening on ' + HOST + ':' + PORT +'\n';
exports.output = consolelog; 

server.on('connection', function (sock) {

	console.log('CONNECTED: ' +
		sock.remoteAddress + ':' + sock.remotePort);
	consolelog +='CONNECTED: ' +
		sock.remoteAddress + ':' + sock.remotePort + '\n';
	exports.output = consolelog; 
	// 其它内容与前例相同
	// 为这个socket实例添加一个"data"事件处理函数
	sock.on('data', function (data) {
		var myFunction = (function () {
			console.log('DATA ' + sock.remoteAddress + ': ' + data);
			consolelog +='DATA ' + sock.remoteAddress + ': ' + data +'\n';
			exports.output = consolelog;
			// 回发该数据，客户端将收到来自服务端的数据
			sock.write('You said "' + data + '"');
		})
		myFunction();
	})

	// 为这个socket实例添加一个"close"事件处理函数
	sock.on('close', function (data) {
		console.log('CLOSED: ' +
			sock.remoteAddress + ' ' + sock.remotePort + '\n\n');
		consolelog +='CLOSED: ' +
			sock.remoteAddress + ' ' + sock.remotePort + '\n\n'
		exports.output = consolelog;
		server.close();
	})

})

server.on('error', function (e) {
  if (e.code == 'EADDRINUSE') {
    console.log('Address in use, retrying...');
    setTimeout(function () {
      server.close();
      server.listen(PORT, HOST);
    }, 1000);
  }
});

function wait(numberMillis) {
	var now = new Date();
	var exitTime = now.getTime() + numberMillis;
	while (true) {
		now = new Date();
		if (now.getTime() > exitTime)
			return;
	}
}

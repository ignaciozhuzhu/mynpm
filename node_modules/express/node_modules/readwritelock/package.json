{
  "name": "readwritelock",
  "version": "0.0.1",
  "description": "A read/write lock for node.",
  "main": "./lib/ReadWriteLock.js",
  "scripts": {
    "test": "nodeunit test/test.js"
  },
  "keywords": [
    "lock",
    "locker",
    "rwlock",
    "readwritelock",
    "synchronize"
  ],
  "author": {
    "name": "xmzhao",
    "email": "zhaxem@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zaxem/ReadWriteLock.git"
  },
  "bugs": {
    "url": "https://github.com/zaxem/ReadWriteLock/issues"
  },
  "license": "MIT",
  "readme": "ReadWriteLock\n=============\n\nA read/write lock for node. Read/Write Locks are used to allow many actors to read from a resource, as long as nothing is writing to it. That also means that only one actor may be writing at any given time.\n\nInstall the ReadWriteLock module from 'npm install readwritelock', then accessing the ReadWriteLock module by:\n```javascript\nvar ReadWriteLock = require('ReadWriteLock');\n```\n\nCreating a ReadWriteLock Lock:\n```javascript\nvar rwlock = new ReadWriteLock();\n```\n\n**readLock(functions, [optional]timeout)**\n__Arguments__\n\n* functions - An function or a function array which have a callback as argument. \n  These functions will begin to excute in parallel when the read lock is acquired.\n  When the callback is called, it will release the read lock.\n* timeout(millisecond) - An optional argument which specify the timeout of the lock. \n  If a timeout is specified, The function will release the read lock when the timeout \n  reached, regardless of whether the callback is called. \n  \n\n__Example__\n\n```javascript\nrwlock.readLock(function(cb){\n    console.log('Start read something!');\n    // do stuff\n\tconsole.log('The reading procedure is finished!');\n    cb();\n});\n\nrwlock.readLock([\n    function(cb){\n        console.log('Start read 1!');\n        // do stuff\n\t    console.log('The reading procedure 1 is finished!');\n        cb();\n    },\n    function(cb){\n        console.log('Start read 2!');\n        // do stuff\n\t    console.log('The reading procedure 2 is finished!');\n        cb();\n    }\n], 10000);\n```\n\n**writeLock(functions, [optional]timeout)**\n__Arguments__\n\n* functions - An function or a function array which have a callback as argument. \n  Because the write lock are mutually exclusive, only one write lock function can \n  be called at the same time. These functions will begin to excute in parallel \n  when the write lock is acquired. When the callback is called, it will release \n  the write lock.\n* timeout(millisecond) - An optional argument which specify the timeout of the lock. \n  If a timeout is specified, The function will release the write lock when the timeout \n  reached, regardless of whether the callback is called. \n  \n\n__Example__\n\n```javascript\nrwlock.writeLock(function(cb){\n    console.log('Start write something!');\n    // do stuff\n\tconsole.log('The writing procedure is finished!');\n    cb();\n});\n\nrwlock.writeLock([\n    function(cb){\n        console.log('Start write 1!');\n        // do stuff\n\t    console.log('The writing procedure 1 is finished!');\n        cb();\n    },\n    function(cb){\n        console.log('Start write 2!');\n        // do stuff\n\t    console.log('The writing procedure 2 is finished!');\n        cb();\n    }\n], 10000);\n```\n\nFor example,\n```javascript\nvar rwlock = new ReadWriteLock();\n\nrwlock.readLock([\n    function(cb){\n        console.log('Start read 1!');\n        setTimeout(function(){\n            console.log('The reading procedure 1 is finished!');\n            cb();\n        },200);\n    },\n    function(cb){\n        console.log('Start read 2!');\n        setTimeout(function(){\n            console.log('The reading procedure 2 is finished!');\n            cb();\n        },100);\n    }\n]);\n\n\nrwlock.writeLock(function(cb){\n    console.log('Start write 1!');\n    setTimeout(function(){\n        console.log('The writing procedure 1 is finished!');\n        cb();\n    },100);\n});\n\nrwlock.readLock(function(cb){\n    console.log('Start read 3!');\n    setTimeout(function(){\n        console.log('The reading procedure 3 is finished!');\n        cb();\n    },100);\n});\n```\nThe result will be\n\n```javascript\nStart read 1!\nStart read 2!\nThe reading procedure 2 is finished!\nThe reading procedure 1 is finished!\nStart write 1!\nThe writing procedure 1 is finished!\nStart read 3!\nThe reading procedure 3 is finished!\n```\n\n\n",
  "readmeFilename": "README.md",
  "_id": "readwritelock@0.0.1",
  "dist": {
    "shasum": "3e7dab5d356a0b6de4e9473c7a4fd955835b7b0e",
    "tarball": "https://registry.npmjs.org/readwritelock/-/readwritelock-0.0.1.tgz"
  },
  "_from": "readwritelock@latest",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "xmzhao",
    "email": "zhaxem@gmail.com"
  },
  "maintainers": [
    {
      "name": "xmzhao",
      "email": "zhaxem@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "3e7dab5d356a0b6de4e9473c7a4fd955835b7b0e",
  "_resolved": "https://registry.npmjs.org/readwritelock/-/readwritelock-0.0.1.tgz",
  "homepage": "https://github.com/zaxem/ReadWriteLock#readme"
}
